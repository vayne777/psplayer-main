/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Команда на найм нового сотрудника.
 */
@Schema(description = "Команда на найм нового сотрудника.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-29T20:10:20.018547+03:00[Europe/Moscow]")
public class HireEmployeeCommand {
  /**
   * Опытность сотрудника. Варианты можно увидеть в разделе recruitmentAgency
   */
  @JsonAdapter(ExperienceEnum.Adapter.class)
  public enum ExperienceEnum {
    JUNIOR("junior"),
    MIDDLE("middle"),
    SENIOR("senior");

    private String value;

    ExperienceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExperienceEnum fromValue(String text) {
      for (ExperienceEnum b : ExperienceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExperienceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExperienceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExperienceEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExperienceEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("experience")
  private ExperienceEnum experience = null;

  @SerializedName("checkoutLineId")
  private Integer checkoutLineId = null;

  public HireEmployeeCommand experience(ExperienceEnum experience) {
    this.experience = experience;
    return this;
  }

   /**
   * Опытность сотрудника. Варианты можно увидеть в разделе recruitmentAgency
   * @return experience
  **/
  @Schema(required = true, description = "Опытность сотрудника. Варианты можно увидеть в разделе recruitmentAgency")
  public ExperienceEnum getExperience() {
    return experience;
  }

  public void setExperience(ExperienceEnum experience) {
    this.experience = experience;
  }

  public HireEmployeeCommand checkoutLineId(Integer checkoutLineId) {
    this.checkoutLineId = checkoutLineId;
    return this;
  }

   /**
   * Если требуется посадить нового сотрудника за кассу, указать номер кассы
   * @return checkoutLineId
  **/
  @Schema(description = "Если требуется посадить нового сотрудника за кассу, указать номер кассы")
  public Integer getCheckoutLineId() {
    return checkoutLineId;
  }

  public void setCheckoutLineId(Integer checkoutLineId) {
    this.checkoutLineId = checkoutLineId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HireEmployeeCommand hireEmployeeCommand = (HireEmployeeCommand) o;
    return Objects.equals(this.experience, hireEmployeeCommand.experience) &&
        Objects.equals(this.checkoutLineId, hireEmployeeCommand.checkoutLineId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(experience, checkoutLineId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HireEmployeeCommand {\n");
    
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    checkoutLineId: ").append(toIndentedString(checkoutLineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
