/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.BuyStockCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.FireEmployeeCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.HireEmployeeCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.PutOffRackCellCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.PutOnRackCellCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.SetOffCheckoutLineCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.SetOnCheckoutLineCommand;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.SetPriceCommand;
/**
 * Объект описывает текущие менеджерские решения, которые нужно совершить в этом тике. Если никаких решений предпринимать не нужно, передается пустой объект
 */
@Schema(description = "Объект описывает текущие менеджерские решения, которые нужно совершить в этом тике. Если никаких решений предпринимать не нужно, передается пустой объект")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-29T20:10:20.018547+03:00[Europe/Moscow]")
public class CurrentTickRequest {
  @SerializedName("fireEmployeeCommands")
  private List<FireEmployeeCommand> fireEmployeeCommands = null;

  @SerializedName("hireEmployeeCommands")
  private List<HireEmployeeCommand> hireEmployeeCommands = null;

  @SerializedName("setOnCheckoutLineCommands")
  private List<SetOnCheckoutLineCommand> setOnCheckoutLineCommands = null;

  @SerializedName("setOffCheckoutLineCommands")
  private List<SetOffCheckoutLineCommand> setOffCheckoutLineCommands = null;

  @SerializedName("buyStockCommands")
  private List<BuyStockCommand> buyStockCommands = null;

  @SerializedName("putOffRackCellCommands")
  private List<PutOffRackCellCommand> putOffRackCellCommands = null;

  @SerializedName("putOnRackCellCommands")
  private List<PutOnRackCellCommand> putOnRackCellCommands = null;

  @SerializedName("setPriceCommands")
  private List<SetPriceCommand> setPriceCommands = null;

  public CurrentTickRequest fireEmployeeCommands(List<FireEmployeeCommand> fireEmployeeCommands) {
    this.fireEmployeeCommands = fireEmployeeCommands;
    return this;
  }

  public CurrentTickRequest addFireEmployeeCommandsItem(FireEmployeeCommand fireEmployeeCommandsItem) {
    if (this.fireEmployeeCommands == null) {
      this.fireEmployeeCommands = new ArrayList<FireEmployeeCommand>();
    }
    this.fireEmployeeCommands.add(fireEmployeeCommandsItem);
    return this;
  }

   /**
   * Команды на увольнение сотрудников. Увольнение происходит только после отдыха от рабочей смены
   * @return fireEmployeeCommands
  **/
  @Schema(description = "Команды на увольнение сотрудников. Увольнение происходит только после отдыха от рабочей смены")
  public List<FireEmployeeCommand> getFireEmployeeCommands() {
    return fireEmployeeCommands;
  }

  public void setFireEmployeeCommands(List<FireEmployeeCommand> fireEmployeeCommands) {
    this.fireEmployeeCommands = fireEmployeeCommands;
  }

  public CurrentTickRequest hireEmployeeCommands(List<HireEmployeeCommand> hireEmployeeCommands) {
    this.hireEmployeeCommands = hireEmployeeCommands;
    return this;
  }

  public CurrentTickRequest addHireEmployeeCommandsItem(HireEmployeeCommand hireEmployeeCommandsItem) {
    if (this.hireEmployeeCommands == null) {
      this.hireEmployeeCommands = new ArrayList<HireEmployeeCommand>();
    }
    this.hireEmployeeCommands.add(hireEmployeeCommandsItem);
    return this;
  }

   /**
   * Команды на найм новых сотрудников
   * @return hireEmployeeCommands
  **/
  @Schema(description = "Команды на найм новых сотрудников")
  public List<HireEmployeeCommand> getHireEmployeeCommands() {
    return hireEmployeeCommands;
  }

  public void setHireEmployeeCommands(List<HireEmployeeCommand> hireEmployeeCommands) {
    this.hireEmployeeCommands = hireEmployeeCommands;
  }

  public CurrentTickRequest setOnCheckoutLineCommands(List<SetOnCheckoutLineCommand> setOnCheckoutLineCommands) {
    this.setOnCheckoutLineCommands = setOnCheckoutLineCommands;
    return this;
  }

  public CurrentTickRequest addSetOnCheckoutLineCommandsItem(SetOnCheckoutLineCommand setOnCheckoutLineCommandsItem) {
    if (this.setOnCheckoutLineCommands == null) {
      this.setOnCheckoutLineCommands = new ArrayList<SetOnCheckoutLineCommand>();
    }
    this.setOnCheckoutLineCommands.add(setOnCheckoutLineCommandsItem);
    return this;
  }

   /**
   * Команды для начала работы сотрудника за кассой
   * @return setOnCheckoutLineCommands
  **/
  @Schema(description = "Команды для начала работы сотрудника за кассой")
  public List<SetOnCheckoutLineCommand> getSetOnCheckoutLineCommands() {
    return setOnCheckoutLineCommands;
  }

  public void setSetOnCheckoutLineCommands(List<SetOnCheckoutLineCommand> setOnCheckoutLineCommands) {
    this.setOnCheckoutLineCommands = setOnCheckoutLineCommands;
  }

  public CurrentTickRequest setOffCheckoutLineCommands(List<SetOffCheckoutLineCommand> setOffCheckoutLineCommands) {
    this.setOffCheckoutLineCommands = setOffCheckoutLineCommands;
    return this;
  }

  public CurrentTickRequest addSetOffCheckoutLineCommandsItem(SetOffCheckoutLineCommand setOffCheckoutLineCommandsItem) {
    if (this.setOffCheckoutLineCommands == null) {
      this.setOffCheckoutLineCommands = new ArrayList<SetOffCheckoutLineCommand>();
    }
    this.setOffCheckoutLineCommands.add(setOffCheckoutLineCommandsItem);
    return this;
  }

   /**
   * Команды для снятия сотрудника с кассы
   * @return setOffCheckoutLineCommands
  **/
  @Schema(description = "Команды для снятия сотрудника с кассы")
  public List<SetOffCheckoutLineCommand> getSetOffCheckoutLineCommands() {
    return setOffCheckoutLineCommands;
  }

  public void setSetOffCheckoutLineCommands(List<SetOffCheckoutLineCommand> setOffCheckoutLineCommands) {
    this.setOffCheckoutLineCommands = setOffCheckoutLineCommands;
  }

  public CurrentTickRequest buyStockCommands(List<BuyStockCommand> buyStockCommands) {
    this.buyStockCommands = buyStockCommands;
    return this;
  }

  public CurrentTickRequest addBuyStockCommandsItem(BuyStockCommand buyStockCommandsItem) {
    if (this.buyStockCommands == null) {
      this.buyStockCommands = new ArrayList<BuyStockCommand>();
    }
    this.buyStockCommands.add(buyStockCommandsItem);
    return this;
  }

   /**
   * Команды на закупку товара у поставщика на склад. При покупке товара на склад вы оплачиваете услуги транспортной компании в размере 5000р. Поэтому старайтесь заказывать реже и по многу
   * @return buyStockCommands
  **/
  @Schema(description = "Команды на закупку товара у поставщика на склад. При покупке товара на склад вы оплачиваете услуги транспортной компании в размере 5000р. Поэтому старайтесь заказывать реже и по многу")
  public List<BuyStockCommand> getBuyStockCommands() {
    return buyStockCommands;
  }

  public void setBuyStockCommands(List<BuyStockCommand> buyStockCommands) {
    this.buyStockCommands = buyStockCommands;
  }

  public CurrentTickRequest putOffRackCellCommands(List<PutOffRackCellCommand> putOffRackCellCommands) {
    this.putOffRackCellCommands = putOffRackCellCommands;
    return this;
  }

  public CurrentTickRequest addPutOffRackCellCommandsItem(PutOffRackCellCommand putOffRackCellCommandsItem) {
    if (this.putOffRackCellCommands == null) {
      this.putOffRackCellCommands = new ArrayList<PutOffRackCellCommand>();
    }
    this.putOffRackCellCommands.add(putOffRackCellCommandsItem);
    return this;
  }

   /**
   * Команды на снятие продукта с полки
   * @return putOffRackCellCommands
  **/
  @Schema(description = "Команды на снятие продукта с полки")
  public List<PutOffRackCellCommand> getPutOffRackCellCommands() {
    return putOffRackCellCommands;
  }

  public void setPutOffRackCellCommands(List<PutOffRackCellCommand> putOffRackCellCommands) {
    this.putOffRackCellCommands = putOffRackCellCommands;
  }

  public CurrentTickRequest putOnRackCellCommands(List<PutOnRackCellCommand> putOnRackCellCommands) {
    this.putOnRackCellCommands = putOnRackCellCommands;
    return this;
  }

  public CurrentTickRequest addPutOnRackCellCommandsItem(PutOnRackCellCommand putOnRackCellCommandsItem) {
    if (this.putOnRackCellCommands == null) {
      this.putOnRackCellCommands = new ArrayList<PutOnRackCellCommand>();
    }
    this.putOnRackCellCommands.add(putOnRackCellCommandsItem);
    return this;
  }

   /**
   * Команды на выставление товаров на полки
   * @return putOnRackCellCommands
  **/
  @Schema(description = "Команды на выставление товаров на полки")
  public List<PutOnRackCellCommand> getPutOnRackCellCommands() {
    return putOnRackCellCommands;
  }

  public void setPutOnRackCellCommands(List<PutOnRackCellCommand> putOnRackCellCommands) {
    this.putOnRackCellCommands = putOnRackCellCommands;
  }

  public CurrentTickRequest setPriceCommands(List<SetPriceCommand> setPriceCommands) {
    this.setPriceCommands = setPriceCommands;
    return this;
  }

  public CurrentTickRequest addSetPriceCommandsItem(SetPriceCommand setPriceCommandsItem) {
    if (this.setPriceCommands == null) {
      this.setPriceCommands = new ArrayList<SetPriceCommand>();
    }
    this.setPriceCommands.add(setPriceCommandsItem);
    return this;
  }

   /**
   * Команды установки цен
   * @return setPriceCommands
  **/
  @Schema(description = "Команды установки цен")
  public List<SetPriceCommand> getSetPriceCommands() {
    return setPriceCommands;
  }

  public void setSetPriceCommands(List<SetPriceCommand> setPriceCommands) {
    this.setPriceCommands = setPriceCommands;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentTickRequest currentTickRequest = (CurrentTickRequest) o;
    return Objects.equals(this.fireEmployeeCommands, currentTickRequest.fireEmployeeCommands) &&
        Objects.equals(this.hireEmployeeCommands, currentTickRequest.hireEmployeeCommands) &&
        Objects.equals(this.setOnCheckoutLineCommands, currentTickRequest.setOnCheckoutLineCommands) &&
        Objects.equals(this.setOffCheckoutLineCommands, currentTickRequest.setOffCheckoutLineCommands) &&
        Objects.equals(this.buyStockCommands, currentTickRequest.buyStockCommands) &&
        Objects.equals(this.putOffRackCellCommands, currentTickRequest.putOffRackCellCommands) &&
        Objects.equals(this.putOnRackCellCommands, currentTickRequest.putOnRackCellCommands) &&
        Objects.equals(this.setPriceCommands, currentTickRequest.setPriceCommands);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fireEmployeeCommands, hireEmployeeCommands, setOnCheckoutLineCommands, setOffCheckoutLineCommands, buyStockCommands, putOffRackCellCommands, putOnRackCellCommands, setPriceCommands);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentTickRequest {\n");
    
    sb.append("    fireEmployeeCommands: ").append(toIndentedString(fireEmployeeCommands)).append("\n");
    sb.append("    hireEmployeeCommands: ").append(toIndentedString(hireEmployeeCommands)).append("\n");
    sb.append("    setOnCheckoutLineCommands: ").append(toIndentedString(setOnCheckoutLineCommands)).append("\n");
    sb.append("    setOffCheckoutLineCommands: ").append(toIndentedString(setOffCheckoutLineCommands)).append("\n");
    sb.append("    buyStockCommands: ").append(toIndentedString(buyStockCommands)).append("\n");
    sb.append("    putOffRackCellCommands: ").append(toIndentedString(putOffRackCellCommands)).append("\n");
    sb.append("    putOnRackCellCommands: ").append(toIndentedString(putOnRackCellCommands)).append("\n");
    sb.append("    setPriceCommands: ").append(toIndentedString(setPriceCommands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
