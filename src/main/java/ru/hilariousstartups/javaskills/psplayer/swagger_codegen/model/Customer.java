/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import ru.hilariousstartups.javaskills.psplayer.swagger_codegen.model.ProductInBasket;
/**
 * Покуптель. Вначале покупатель находится в торговом зале и формирует корзину покупок. По окончании проходит на кассы и расплачивается
 */
@Schema(description = "Покуптель. Вначале покупатель находится в торговом зале и формирует корзину покупок. По окончании проходит на кассы и расплачивается")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-29T20:10:20.018547+03:00[Europe/Moscow]")
public class Customer {
  @SerializedName("id")
  private Integer id = null;

  /**
   * Фаза, в которой сейчас покупатель. Либо в торговом зале (in_hall), либо стоит в очереди на кассы (wait_checkout), либо уже расплачивается на кассе (at_checkout)
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    IN_HALL("in_hall"),
    WAIT_CHECKOUT("wait_checkout"),
    AT_CHECKOUT("at_checkout");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("basket")
  private List<ProductInBasket> basket = null;

  public Customer id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id покупателя
   * @return id
  **/
  @Schema(description = "Id покупателя")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Customer mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Фаза, в которой сейчас покупатель. Либо в торговом зале (in_hall), либо стоит в очереди на кассы (wait_checkout), либо уже расплачивается на кассе (at_checkout)
   * @return mode
  **/
  @Schema(description = "Фаза, в которой сейчас покупатель. Либо в торговом зале (in_hall), либо стоит в очереди на кассы (wait_checkout), либо уже расплачивается на кассе (at_checkout)")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public Customer basket(List<ProductInBasket> basket) {
    this.basket = basket;
    return this;
  }

  public Customer addBasketItem(ProductInBasket basketItem) {
    if (this.basket == null) {
      this.basket = new ArrayList<ProductInBasket>();
    }
    this.basket.add(basketItem);
    return this;
  }

   /**
   * Продуктовая корзина
   * @return basket
  **/
  @Schema(description = "Продуктовая корзина")
  public List<ProductInBasket> getBasket() {
    return basket;
  }

  public void setBasket(List<ProductInBasket> basket) {
    this.basket = basket;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.id, customer.id) &&
        Objects.equals(this.mode, customer.mode) &&
        Objects.equals(this.basket, customer.basket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, mode, basket);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    basket: ").append(toIndentedString(basket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
